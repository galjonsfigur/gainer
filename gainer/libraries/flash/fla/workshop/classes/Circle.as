class Circle extends RigidBody {		public var radius:Number = 50;	private var rim:Vector;	private var tan:Vector;	private var range:Object;		function Circle() {	}		public function init(x, y, rotation, radius, mass, elasticity, friction):Void {		super.init(x,y,mass,elasticity,friction);				rim = new Vector(Math.cos(rotation), Math.sin(rotation));		tan = new Vector(0, 0);				this.radius = radius;		_width = _height = radius*2;				range = new Object();		range.min = 0;		range.max = 0;	}		public function update():Void {		super.update();				rim.plusEquals(tan);		var clen:Number = Math.sqrt(rim.x * rim.x + rim.y * rim.y);		var diff:Number = (clen - radius) / clen;		rim.x -= rim.x * diff;		rim.y -= rim.y * diff;		_rotation = Math.atan2(rim.y, rim.x)*180/Math.PI;	}		public function resolve(mtd:Vector, vel:Vector, normal:Vector, depth:Number, order:Number):Void {		super.resolve(mtd, vel, normal, depth, order);				var n = normal.mult(sign(depth * order));		tan.x = -rim.y;		tan.y = rim.x;		tan = tan.normalize();		var cp:Number = velocity.cross(n);		tan.multEquals(cp);	}		private function sign(val:Number):Number {		if (val < 0) return -1		return 1;	}		public function getProjection(v:Vector):Object {		var c:Number = position.dot(v);		range.min = c - radius;		range.max = c + radius;		return range;	}}